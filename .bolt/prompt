# 🌐 UI Design & Development Guidelines

For all designs, make sure they are **beautiful**, **premium**, and **non-cookie-cutter**.
All webpages must be **fully featured**, **production-ready**, and **responsive** across devices.

---

## 💫 Design Quality Expectations

* ✅ **Fully Featured** – No placeholder UI
* ✅ **Production-Ready** – Usable in real-world deployment
* ✅ **Responsive** – Works across mobile, tablet, desktop

Visual style must be:

* 🎨 **Modern**
* 🎯 **Polished**
* 🎥 **Creator-Centric** – Designed for creators, studios, and media users

---

## ⚙️ Tech Stack

* Use **JSX syntax**
* Style with **Tailwind CSS** only
* Use **React functional components** and **React Hooks**
* Use only **Lucide React** (`lucide-react`) for all icons/logos
  *Do **not** use any other UI or icon libraries unless explicitly instructed*

By default, this template uses:

* ✅ JSX + Tailwind CSS
* ✅ Lucide React Icons
* ❌ No third-party UI kits (MUI, Chakra, etc.)

---

## 🧱 Code Structure & Modularity

Always generate **modular, organized code**. Avoid putting all code in a single file.

Recommended structure:

```
src/
├── components/   # Reusable UI elements (Button, Modal, Hero etc.)
├── pages/        # Entry pages (e.g., Home.jsx)
├── contexts/     # React context providers (e.g., ThemeContext, AuthContext)
├── services/     # API or backend interaction functions
├── data/         # Static or dynamic content/data definitions
├── types/        # TypeScript type definitions (if using TS)
├── styles/       # Tailwind config/overrides
├── ... other folder/files if required.

```

* Keep each component clean, and self-contained
* Use proper import paths and naming conventions
* Prioritize clarity, maintainability, and scalability

---

> This instruction is to be followed strictly for all design + frontend outputs.
