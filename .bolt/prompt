# 🌐 UI Design & Development Guidelines

For all designs, make sure they are **beautiful**, **premium**, and **non-cookie-cutter**.
All webpages must be **fully featured**, **production-ready**, and **responsive** across devices.

---

## 💫 Design Quality Expectations

* ✅ **Fully Featured** – No placeholder UI
* ✅ **Production-Ready** – Usable in real-world deployment
* ✅ **Responsive** – Works across mobile, tablet, desktop

Visual style must be:

* 🎨 **Modern**
* 🎯 **Polished**
* 🎥 **Creator-Centric** – Designed for creators, studios, and media users

---

## ⚙️ Tech Stack

* Use **JSX syntax**
* Style with **Tailwind CSS** only
* Use **React functional components** and **React Hooks**
* Use only **Lucide React** (`lucide-react`) for all icons/logos
  *Do **not** use any other UI or icon libraries unless explicitly instructed*

By default, this template uses:

* ✅ JSX + Tailwind CSS
* ✅ Lucide React Icons
* ❌ No third-party UI kits (MUI, Chakra, etc.)

---

## 🧱 Code Structure & Modularity

Always generate **modular, organized code**. Avoid putting all code in a single file.

Recommended structure:

```
src/
├── components/   # Reusable UI elements (Button, Modal, Hero etc.)
├── pages/        # Entry pages (e.g., Home.jsx)
├── contexts/     # React context providers (e.g., ThemeContext, AuthContext)
├── services/     # API or backend interaction functions
├── data/         # Static or dynamic content/data definitions
├── types/        # TypeScript type definitions (if using TS)
├── styles/       # Tailwind config/overrides
├── ... other folder/files if required.
```

* Keep each component clean and self-contained
* Use proper import paths and naming conventions
* Prioritize clarity, maintainability, and scalability

---

## 🌌 Optimization & UX Best Practices

### ⏳ Performance First

* Lazy-load non-critical components and images
* Minimize bundle size with dynamic imports
* Use Tailwind's `container`, `max-w-*`, and spacing classes smartly

### 🚗 Fast Initial Load

* Minimize large LCP elements above the fold
* Use compressed video/image assets (WebP, MP4)

### 📅 Smooth Interactions

* Add hover, focus, and transition states using Tailwind

### ✉️ Feedback Matters

* Use toasts, modals, loading spinners, and status messages clearly
* Pause auto-dismiss toasts on hover; include icons and color cues

### 🚪 Modals & Navigation

* Use drawer-style modals for mobile
* Keep navigation sticky or easy to access

### 🧼 Accessible UX

* Use `aria-*` attributes and semantic HTML
* Include alt text on all images/icons

---

## 🛈 Help Text Guidelines 
* Use help text or tooltips beside form fields, settings, and UI inputs to ensure users clearly understand their purpose — especially where advanced controls or model-specific behaviors are involved.
* Every non-obvious control must have either inline help text or an accessible tooltip. Prioritize user confidence over minimalism.

---

> This instruction is to be followed strictly for all design + frontend outputs.
